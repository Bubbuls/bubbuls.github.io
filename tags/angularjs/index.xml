<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angularjs on Kevin ALBRECHT</title>
    <link>https://bubbuls.github.io/tags/angularjs/</link>
    <description>Recent content in Angularjs on Kevin ALBRECHT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Thu, 18 Feb 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bubbuls.github.io/tags/angularjs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implémenter une GoogleMap avec AngularJS et TypeScript dans Cordova</title>
      <link>https://bubbuls.github.io/posts/implementer-une-googlemap-avec-angularjs-et-typescript-dans-cordova/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bubbuls.github.io/posts/implementer-une-googlemap-avec-angularjs-et-typescript-dans-cordova/</guid>
      <description>Introduction Récemment nous avons dû afficher une GoogleMap dans une application Cordova.
Lors de son initialisation, la librairie cherche à injecter dynamiquement des scripts nécessaires à son bon fonctionnement ce qui est, sur la plateforme Windows, interdit. Le seul moyen de le permettre est que la carte se retrouve sandboxée dans le composant ms-web-view.
Nous avons donc des solutions différentes suivant la plateforme d’utilisation, c’est là que les “merges” de Cordova entrent en jeu, il va falloir une implémentation différente par plateforme sans faire faillir l&amp;rsquo;IntelliSense et la compilation TypeScript.</description>
    </item>
    
    <item>
      <title>Attendre que vos ressources dynamiques soient chargées grâce aux promises</title>
      <link>https://bubbuls.github.io/posts/attendre-que-vos-ressources-dynamiques-soient-chargees-grace-aux-promises/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bubbuls.github.io/posts/attendre-que-vos-ressources-dynamiques-soient-chargees-grace-aux-promises/</guid>
      <description>Dans une webApp, s’il est nécessaire de charger des scripts/ressources dynamiquement, il est alors important de pouvoir s’assurer du chargement complet de ceux-ci dans notre application avant de pouvoir exécuter du code lié à ces éléments.
Pour reprendre l’exemple de mon article traitant des GoogleMap nous chargions des scripts dynamiquement, pour gérer le cas nous avons 2 étapes:
Dans un premier temps nous allons disposer d’une méthode retournant une promise, qui va être, soit résolue directement, soit en stocker le deferred, en fonction d’une simple propriété isLoaded : boolean.</description>
    </item>
    
  </channel>
</rss>