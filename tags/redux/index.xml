<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redux on Kevin ALBRECHT</title>
    <link>https://bubbuls.github.io/tags/redux/</link>
    <description>Recent content in Redux on Kevin ALBRECHT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Mon, 12 Feb 2018 22:37:34 +0200</lastBuildDate>
    
	<atom:link href="https://bubbuls.github.io/tags/redux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Librairies Ngrx Pour Une Application Angular Reactive Part 2 Ngrx Effects</title>
      <link>https://bubbuls.github.io/posts/librairies-ngrx-pour-une-application-angular-reactive-part-2-ngrx-effects/</link>
      <pubDate>Mon, 12 Feb 2018 22:37:34 +0200</pubDate>
      
      <guid>https://bubbuls.github.io/posts/librairies-ngrx-pour-une-application-angular-reactive-part-2-ngrx-effects/</guid>
      <description>Vous voici sur la partie 2 de cet article où nous allons implémenter un Effect. Si vous n&amp;rsquo;avez pas vu la première partie, c&amp;rsquo;est ici :Librairies NGRX pour une application Angular réactive. Part 1&amp;frasl;3 : ngrx/store
ngrx/effects ngrx/effects ? Les reducers sont dits &amp;ldquo;purs&amp;rdquo; et ne doivent donc en aucun cas récupérer une donnée autre que leurs paramètres, nous allons donc rajouter un middleware pour volontairement introduire du &amp;ldquo;side effect&amp;rdquo; qui représentera nos intéractions serveur.</description>
    </item>
    
    <item>
      <title>Librairies Ngrx Pour Une Application Angular Reactive Part 1 Ngrx Store</title>
      <link>https://bubbuls.github.io/posts/librairies-ngrx-pour-une-application-angular-reactive-part-1-ngrx-store/</link>
      <pubDate>Mon, 12 Feb 2018 14:20:40 +0200</pubDate>
      
      <guid>https://bubbuls.github.io/posts/librairies-ngrx-pour-une-application-angular-reactive-part-1-ngrx-store/</guid>
      <description>Mon article précédent traitait globalement de l&amp;rsquo;architecture proposée par Redux pour des web app dites &amp;ldquo;réactives&amp;rdquo;. Je vous recommande de le lire si vous n&amp;rsquo;êtes pas familier avec Redux : Le State management pour les webapps avec Redux.
Maintenant, sur le même sujet, nous allons nous concentrer sur les applications Angular et nous allons voir des librairies de la team ngrx. Cet article est divisé en 3 parties :</description>
    </item>
    
    <item>
      <title>Le State management pour les webapps avec Redux</title>
      <link>https://bubbuls.github.io/posts/le-state-management-pour-les-webapps-avec-redux/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bubbuls.github.io/posts/le-state-management-pour-les-webapps-avec-redux/</guid>
      <description>Introduction Problématique Dans une web app simple, par défaut on va permettre à nos composants de consommer de la donnée : un composant peut lire, créer ou éditer une donnée &amp;ldquo;A&amp;rdquo; , tandis qu&amp;rsquo;un autre peut lui aussi modifier cette donnée &amp;ldquo;A&amp;rdquo;, et qu&amp;rsquo;un troisième composant va pouvoir éditer une propriété de la donnée &amp;ldquo;A&amp;rdquo;. Il est facile d&amp;rsquo;avoir la référence d&amp;rsquo;un objet distribué à droite à gauche et de permettre un accès vers de multiples composants.</description>
    </item>
    
  </channel>
</rss>